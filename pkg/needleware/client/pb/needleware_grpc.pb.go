// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/needleware.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NeedlewareClient is the client API for Needleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeedlewareClient interface {
	OnConnOpened(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Decision, error)
	OnConnClosed(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type needlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewNeedlewareClient(cc grpc.ClientConnInterface) NeedlewareClient {
	return &needlewareClient{cc}
}

func (c *needlewareClient) OnConnOpened(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Decision, error) {
	out := new(Decision)
	err := c.cc.Invoke(ctx, "/me.igops.needleware.Needleware/onConnOpened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *needlewareClient) OnConnClosed(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/me.igops.needleware.Needleware/onConnClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeedlewareServer is the server API for Needleware service.
// All implementations should embed UnimplementedNeedlewareServer
// for forward compatibility
type NeedlewareServer interface {
	OnConnOpened(context.Context, *Connection) (*Decision, error)
	OnConnClosed(context.Context, *ConnectionId) (*emptypb.Empty, error)
}

// UnimplementedNeedlewareServer should be embedded to have forward compatible implementations.
type UnimplementedNeedlewareServer struct {
}

func (UnimplementedNeedlewareServer) OnConnOpened(context.Context, *Connection) (*Decision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConnOpened not implemented")
}
func (UnimplementedNeedlewareServer) OnConnClosed(context.Context, *ConnectionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConnClosed not implemented")
}

// UnsafeNeedlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeedlewareServer will
// result in compilation errors.
type UnsafeNeedlewareServer interface {
	mustEmbedUnimplementedNeedlewareServer()
}

func RegisterNeedlewareServer(s grpc.ServiceRegistrar, srv NeedlewareServer) {
	s.RegisterService(&Needleware_ServiceDesc, srv)
}

func _Needleware_OnConnOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeedlewareServer).OnConnOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.igops.needleware.Needleware/onConnOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeedlewareServer).OnConnOpened(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Needleware_OnConnClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeedlewareServer).OnConnClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.igops.needleware.Needleware/onConnClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeedlewareServer).OnConnClosed(ctx, req.(*ConnectionId))
	}
	return interceptor(ctx, in, info, handler)
}

// Needleware_ServiceDesc is the grpc.ServiceDesc for Needleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Needleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "me.igops.needleware.Needleware",
	HandlerType: (*NeedlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "onConnOpened",
			Handler:    _Needleware_OnConnOpened_Handler,
		},
		{
			MethodName: "onConnClosed",
			Handler:    _Needleware_OnConnClosed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/needleware.proto",
}
